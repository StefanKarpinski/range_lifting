import Base: TwicePrecision, canonicalize2, div12

# not a generally correct definition, but good enough here
Base.isless(x::TwicePrecision, y::TwicePrecision) = x < y
Base.zero(x::TwicePrecision) = typeof(x)(zero(x.hi))
Base.one(x::TwicePrecision) = typeof(x)(one(x.hi))

Base.signbit(x::TwicePrecision) = iszero(x.hi) ? signbit(x.lo) : signbit(x.hi)
Base.isinteger(x::TwicePrecision) = isinteger(x.hi) & isinteger(x.lo)

function Base.round(
    x::TwicePrecision{<:AbstractFloat},
    R::RoundingMode{mode} = RoundNearest,
) where {mode}
    if eps(x.hi) ‚â• 1
        flip = mode in (:ToZero, :FromZero) && x.hi*x.lo < 0
        r_lo = flip ? -round(-x.lo, R) : round(x.lo, R)
        return TwicePrecision(x.hi, r_lo)
    else
        next = nextfloat(x.hi, Int(sign(x.lo)))
        this = round(x.hi, R)
        that = round(next, R)
        this == that && return TwicePrecision(this)
        edge = mode in (:ToZero, :FromZero, :Up, :Down) ? 0.0 : 0.5
        frac = abs(x.hi - this)
        return TwicePrecision(frac == edge ? that : this)
    end
end

function Base.div(
    a::TwicePrecision{T},
    b::TwicePrecision{T},
    R::RoundingMode,
) where {T}
    round(a/b, R)
end

Base.nextfloat(x::TwicePrecision, k::Integer=1) =
    TwicePrecision(canonicalize2(x.hi, nextfloat(x.lo, k))...)
Base.prevfloat(x::TwicePrecision, k::Integer=1) =
    TwicePrecision(canonicalize2(x.hi, prevfloat(x.lo, k))...)

tmul(x::T, y::TwicePrecision{T}) where {T<:AbstractFloat} =
    fma(x, y.hi, x*y.lo)

function tz(x::T) where {T<:AbstractFloat}
    iszero(x) && return typemax(Int)
    n, p = Base.decompose(x)
    trailing_zeros(n) + p
end

tz(n::Integer) = trailing_zeros(n)
tz(x::TwicePrecision) = iszero(x.lo) ? tz(x.hi) : tz(x.lo)

# pick value in interval with the most trailing zeros
function simplest_float(lo::T, hi::T) where {T<:AbstractFloat}
    lo == hi && return lo
    hi < 0 && return -simplest_float(-hi, -lo)
    lo ‚â§ 0 && return zero(T)
    @assert 0 < lo < hi
    e = exponent(hi - lo)
    b = floor(ldexp(hi, -e))
    a = max(lo, ldexp(b - 1, e))
    b = ldexp(b, e)
    m = tz(a) ‚â• tz(b) ? a : b
    @assert lo ‚â§ m ‚â§ hi
    return m
end

function simplest_float(
    lo :: TwicePrecision{T},
    hi :: TwicePrecision{T},
) where {T<:AbstractFloat}
    lo.hi == hi.hi &&
        return TwicePrecision(lo.hi, simplest_float(lo.lo, hi.lo))
    @assert lo.hi < hi.hi
    l = lo.lo ‚â§ 0 ? lo.hi : nextfloat(lo.hi)
    h = hi.lo ‚â• 0 ? hi.hi : prevfloat(hi.hi)
    l ‚â§ h && return TwicePrecision(simplest_float(l, h))
    @assert 0 < lo.lo && hi.lo < 0
    lo.hi + simplest_float(TwicePrecision(lo.lo), hi - lo.hi)
end

function ratio(x::TwicePrecision{T}) where {T<:AbstractFloat}
    p = min(0, tz(x))
    n = TwicePrecision(ldexp(x.hi, -p), ldexp(x.lo, -p))
    d = TwicePrecision(exp2(-p))
    return n, d
end

# based on https://stackoverflow.com/a/65189151/659248 (inclusive version)
function simplest_rational_core(
    lo :: TwicePrecision{T},
    hi :: TwicePrecision{T},
) where {T<:AbstractFloat}
    ùüò = zero(lo)
    ùüô = one(lo)

    @assert ùüò < lo ‚â§ hi

    s, t = ratio(lo)
    u, v = ratio(hi)

    a = d = ùüô
    b = c = ùüò

    while true
        q = (s - ùüô) √∑ t
        s, t, u, v = v, u-q*v, t, s-q*t
        a, b, c, d = b+q*a, a, d+q*c, c
        s ‚â§ t && break
    end

    return a + b, c + d
end

function simplest_rational(
    lo :: TwicePrecision{T},
    hi :: TwicePrecision{T},
) where {T<:AbstractFloat}
    ùüò = zero(lo)
    ùüô = one(lo)

    # reduce to positive case
    if hi < ùüò
        n, d = simplest_rational(-hi, -lo)
        return -n, d
    end
    lo ‚â§ ùüò && return 0, ùüô

    # if there are integers, return the simplest one
    if round(lo, RoundUp) ‚â§ round(hi, RoundDown)
        return simplest_float(lo, hi), ùüô
    end

    # find strictly minimal solution
    n, d = simplest_rational_core(lo, hi)

    # simplify numerator and denominator
    n = simplest_float(d*lo, d*hi)
    d = simplest_float(n/hi, n/lo)

    # TODO: eliminate common factors

    # check we're in the interval
    @assert lo ‚â§ n/d ‚â§ hi
    return n, d
end

function ival(x::T) where {T<:AbstractFloat}
    lo = (TwicePrecision(x) + TwicePrecision(prevfloat(x)))/2
    hi = (TwicePrecision(x) + TwicePrecision(nextfloat(x)))/2
    lo, hi
end

"""
    ratio_break‚Å∫(x, y) -> r

Return a `TwicePrecision` value `r` such that:

    - `typeof(x, y*prevfloat(r)) == x`
    - `typeof(x, y*nextfloat(r)) != x`

Inputs can be floats or `TwicePrecision` floats.
"""
function ratio_break‚Å∫(x::T, y::T) where {T<:AbstractFloat}
    x‚Åª = x
    if signbit(y)
        x‚Åª, y = -x‚Åª, -y
    end
    x‚Å∫ = nextfloat(x‚Åª)
    h = 0.5*(x‚Åª/y + x‚Å∫/y)
    l = 0.5*(fma(-y, h, x‚Åª) + fma(-y, h, x‚Å∫))/y
    while true
        if fma(y, h, y*l) ‚â§ x‚Åª
            while fma(y, h, y*l) ‚â§ x‚Åª
                l = nextfloat(l)
            end
            l = prevfloat(l)
        else
            while fma(y, h, y*l) ‚â• x‚Å∫
                l = prevfloat(l)
            end
            l = nextfloat(l)
        end
        h + l == h && break # canonical
        h, l = canonicalize2(h, l)
    end
    @assert (h, l) == canonicalize2(h, l)
    @assert fma(y, h, y*prevfloat(l)) == x‚Åª
    @assert fma(y, h, y*nextfloat(l)) == x‚Å∫
    r = TwicePrecision(h, l)
end

function ratio_break‚Å∫(
    x::TwicePrecision{T},
    y::TwicePrecision{T},
) where {T<:AbstractFloat}
    if signbit(y)
        x, y = -x, -y
    end
    r = x/y
    while r*y ‚â§ x
        r = nextfloat(r)
    end
    while r*y > x
        r = prevfloat(r)
    end
    @assert r*y == x
    @assert nextfloat(r)*y > x
    return r
end

"""
    ratio_break‚Åª(x, y) -> r

Return a `TwicePrecision` value `r` such that:

    - `typeof(x, y*prevfloat(r)) != x`
    - `typeof(x, y*nextfloat(r)) == x`

Inputs can be floats or `TwicePrecision` floats.
"""
function ratio_break‚Åª(x::T, y::T) where {T<:AbstractFloat}
    if signbit(y)
        x, y = -x, -y
    end
    ratio_break‚Å∫(prevfloat(x), y)
end

function ratio_break‚Åª(
    x::TwicePrecision{T},
    y::TwicePrecision{T},
) where {T<:AbstractFloat}
    if signbit(y)
        x, y = -x, -y
    end
    r = x/y
    while r*y ‚â• x
        r = prevfloat(r)
    end
    while r*y < x
        r = nextfloat(r)
    end
    @assert r*y == x
    @assert prevfloat(r)*y < x
    return r
end

"""
    ratio_ival(x, y)

Shorthand for `ratio_break‚Åª(x, y), ratio_break‚Å∫(x, y)`.
"""
function ratio_ival(x::T, y::T) where {T}
    ratio_break‚Åª(x, y), ratio_break‚Å∫(x, y)
end

struct FRange{T<:AbstractFloat} <: AbstractRange{T}
    c::T
    d::T
    n::T
    g::TwicePrecision{T}
end

Base.length(r::FRange) = Int(r.n) + 1
Base.step(r::FRange{T}) where {T<:AbstractFloat} = T(r.d*r.g)
Base.getindex(r::FRange{T}, i::Integer) where {T<:AbstractFloat} =
    T((TwicePrecision{T}(i-1)*r.d + r.c)*r.g)

function range_ratios(a::T, s::T, b::T) where {T<:AbstractFloat}
    # handle negative step
    if signbit(s)
        n, c, d, e = range_ratios(b, -s, a)
        return n, e, d, c
    end
    # double precision intervals for a, s, b
    a‚Åª, a‚Å∫ = ival(abs(a))
    s‚Åª, s‚Å∫ = ival(abs(s))
    b‚Åª, b‚Å∫ = ival(abs(b))
    # end-point/step ratio intervals
    r_a‚Åª = ratio_break‚Åª(a‚Åª, s‚Å∫)
    r_a‚Å∫ = ratio_break‚Å∫(a‚Å∫, s‚Åª)
    r_b‚Åª = ratio_break‚Åª(b‚Åª, s‚Å∫)
    r_b‚Å∫ = ratio_break‚Å∫(b‚Å∫, s‚Åª)
    # signed ratio intervals
    sr_a‚Åª, sr_a‚Å∫ = signbit(a) ? (-r_a‚Å∫, -r_a‚Åª) : (r_a‚Åª, r_a‚Å∫)
    sr_b‚Åª, sr_b‚Å∫ = signbit(b) ? (-r_b‚Å∫, -r_b‚Åª) : (r_b‚Åª, r_b‚Å∫)
    # pick simplest range length
    n = T(simplest_float(sr_b‚Åª - sr_a‚Å∫, sr_b‚Å∫ - sr_a‚Åª))
    # check if end-point can be hit
    p = tz(n)
    p ‚â• 0 || error("end-point can't be hit (length)")
    # ratio intervals between end-points
    r_ab‚Åª = ratio_break‚Åª(a‚Åª, b‚Å∫)
    r_ab‚Å∫ = ratio_break‚Å∫(a‚Å∫, b‚Åª)
    r_ba‚Åª = ratio_break‚Åª(b‚Åª, a‚Å∫)
    r_ba‚Å∫ = ratio_break‚Å∫(b‚Å∫, a‚Åª)
    # stabilize ratio intervals
    while true
        changed = false
        # shrink [a] based on length
        if sr_a‚Åª < sr_b‚Åª - n
            sr_a‚Åª = sr_b‚Åª - n
            if !signbit(a)
                r_a‚Åª = sr_a‚Åª
            else
                r_a‚Å∫ = -sr_a‚Åª
            end
            changed = true
        end
        if sr_a‚Å∫ > sr_b‚Å∫ - n
            sr_a‚Å∫ = sr_b‚Å∫ - n
            if !signbit(a)
                r_a‚Å∫ = sr_a‚Å∫
            else
                r_a‚Åª = -sr_a‚Å∫
            end
            changed = true
        end
        # shrink [b] based on length
        if sr_b‚Åª < sr_a‚Åª + n
            sr_b‚Åª = sr_a‚Åª + n
            if !signbit(b)
                r_b‚Åª = sr_b‚Åª
            else
                r_b‚Å∫ = -sr_b‚Åª
            end
            changed = true
        end
        if sr_b‚Å∫ > sr_a‚Å∫ + n
            sr_b‚Å∫ = sr_a‚Å∫ + n
            if !signbit(b)
                r_b‚Å∫ = sr_b‚Å∫
            else
                r_b‚Åª = -sr_b‚Å∫
            end
            changed = true
        end
        # shrink [a] based on ratios
        if r_a‚Åª < r_b‚Åª * r_ab‚Åª
            r_a‚Åª = r_b‚Åª * r_ab‚Åª
            if !signbit(a)
                sr_a‚Åª = r_a‚Åª
            else
                sr_a‚Å∫ = -r_a‚Åª
            end
            changed = true
        end
        if r_a‚Å∫ > r_b‚Å∫ * r_ab‚Å∫
            r_a‚Å∫ = r_b‚Å∫ * r_ab‚Å∫
            if !signbit(a)
                sr_a‚Å∫ = r_a‚Å∫
            else
                sr_a‚Åª = -r_a‚Å∫
            end
            changed = true
        end
        # shrink [b] based on ratios
        if r_b‚Åª < r_a‚Åª * r_ba‚Åª
            r_b‚Åª = r_a‚Åª * r_ba‚Åª
            if !signbit(b)
                sr_b‚Åª = r_b‚Åª
            else
                sr_b‚Å∫ = -r_b‚Åª
            end
            changed = true
        end
        if r_b‚Å∫ > r_a‚Å∫ * r_ba‚Å∫
            r_b‚Å∫ = r_a‚Å∫ * r_ba‚Å∫
            if !signbit(b)
                sr_b‚Å∫ = r_b‚Å∫
            else
                sr_b‚Åª = -r_b‚Å∫
            end
            changed = true
        end
        changed || break
    end
    # find common fraction interval
    if abs(a) ‚â§ abs(b)
        q = round(prevfloat(sr_a‚Åª), RoundDown)
        f‚Åª = sr_a‚Åª - q
        f‚Å∫ = sr_a‚Å∫ - q
    else
        q = round(prevfloat(sr_b‚Åª), RoundDown)
        f‚Åª = sr_b‚Åª - q
        f‚Å∫ = sr_b‚Å∫ - q
    end
    f‚Åª ‚â§ f‚Å∫ || error("end-point can't be hit (ratios)")
    # find simplest rational in interval
    d = T(simplest_rational(f‚Åª*exp2(-p), f‚Å∫*exp2(-p))[2])
    # find simplest end-point ratios
    c = T(simplest_float(d*r_a‚Åª, d*r_a‚Å∫))
    e = T(simplest_float(d*r_b‚Åª, d*r_b‚Å∫))
    # eliminate common powers of two
    z = min(tz(c), tz(d), tz(e))
    @assert z ‚â• -p
    t = exp2(-z)
    c *= t; d *= t; e *= t
    # check that c:e matches a:b
    @assert a‚Åª*e ‚â§ b‚Å∫*c
    @assert a‚Å∫*e ‚â• b‚Åª*c
    # check that c:d matches a:s
    @assert a‚Åª*d ‚â§ s‚Å∫*c
    @assert a‚Å∫*d ‚â• s‚Åª*c
    # check that e:d matches b:s
    @assert b‚Åª*d ‚â§ s‚Å∫*e
    @assert b‚Å∫*d ‚â• s‚Åª*e
    # restore end-point signs
    signbit(a) && (c = -c)
    signbit(b) && (e = -e)
    # check length
    @assert d*n == e - c
    # return values
    return n, c, d, e
end

function lift_range(a::T, s::T, b::T) where {T<:AbstractFloat}
    # find the relative grid ratios
    n, c, d, e = range_ratios(a, s, b)
    # integers such that:
    #  - c = d*a/s
    #  - e = d*b/s
    # still need rational value g:
    #  - g = s/d = a/c = b/e
    # get double precision bounds on g:
    lo_a, hi_a = ratio_ival(a, c)
    lo_s, hi_s = ratio_ival(s, d)
    lo_b, hi_b = ratio_ival(b, e)
    lo = max(lo_a, lo_s, lo_b)
    hi = min(hi_a, hi_s, hi_b)
    @assert lo ‚â§ hi # otherwise can't work
    num, den = simplest_rational(lo, hi)
    g = num/den
    @assert lo ‚â§ g ‚â§ hi
    # check that inputs are hit
    @assert tmul(c, g) == a
    @assert tmul(d, g) == s
    @assert tmul(e, g) == b
    # return range object
    FRange(c, d, n, g)
end
