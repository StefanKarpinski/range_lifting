import Base: TwicePrecision, canonicalize2

# not a generally correct definition, but good enough here
Base.isless(x::TwicePrecision, y::TwicePrecision) = x < y

function tz(x::AbstractFloat)
    n, p = Base.decompose(x)
    trailing_zeros(n) + p
end

tz(n::Integer) = trailing_zeros(n)
tz(x::TwicePrecision) = iszero(x.lo) ? tz(x.hi) : tz(x.lo)

# pick value in interval with the most trailing zeros
function simplest_float(lo::T, hi::T) where {T<:AbstractFloat}
    lo == hi && return lo
    hi < 0 && return -simplest_float(-hi, -lo)
    lo ‚â§ 0 && return zero(T)
    @assert 0 < lo < hi
    e = exponent(hi - lo)
    b = floor(ldexp(hi, -e))
    a = max(lo, ldexp(b - 1, e))
    b = ldexp(b, e)
    m = tz(a) ‚â• tz(b) ? a : b
    @assert lo ‚â§ m ‚â§ hi
    return m
end

function simplest_rational_core(
    (s, t)::Tuple{T,T},
    (u, v)::Tuple{T,T},
) where {T<:Real}
    ùüò = zero(T)
    ùüô = one(T)

    a = d = ùüô
    b = c = ùüò

    while true
        q = s √∑ t
        s, t, u, v = v, u-q*v, t, s-q*t
        a, b, c, d = b+q*a, a, d+q*c, c
        s < t && break
    end

    return a + b, c + d
end

function simplest_rational(
    (s, t)::Tuple{T,T},
    (u, v)::Tuple{T,T},
) where {T<:Real}
    n, d = simplest_rational_core((s, t), (u, v))
    # lower bound for n
    n‚Åª = prevfloat(cld(d*s, t))
    while n‚Åª < n && n‚Åª*t < d*s # n‚Åª/d < s/t
        n‚Åª = nextfloat(n‚Åª)
    end
    # upper bound for n
    n‚Å∫ = nextfloat(fld(d*u, v))
    while n < n‚Å∫ && n‚Å∫*v > d*u # u/v < n‚Å∫/d
        n‚Å∫ = prevfloat(n‚Å∫)
    end
    # simplify n
    n = simplest_float(n‚Åª, n‚Å∫)
    return n, d
end

function g_ival(a::T, c::T) where {T<:AbstractFloat}
    a, c = abs(a), abs(c)
    h = a/c
    # lower bound
    a‚Åª = prevfloat(a)
    h‚Åª = h + 0.5*(fma(-c, h, a) + fma(-c, h, a‚Åª))/c
    l‚Åª = nextfloat(0.5*(fma(-c, h‚Åª, a) + fma(-c, h‚Åª, a‚Åª))/c)
    @assert (h‚Åª, l‚Åª) == canonicalize2(h‚Åª, l‚Åª)
    @assert fma(c, h‚Åª, c*l‚Åª) > a‚Åª
    while fma(c, h‚Åª, c*l‚Åª) > a‚Åª
        l‚Åª = prevfloat(l‚Åª)
    end
    l‚Åª = nextfloat(l‚Åª)
    @assert fma(c, h‚Åª, c*l‚Åª) == a
    @assert fma(c, h‚Åª, c*prevfloat(l‚Åª)) == a‚Åª
    @assert (h‚Åª, l‚Åª) == canonicalize2(h‚Åª, l‚Åª)
    g‚Åª = TwicePrecision(h‚Åª, l‚Åª)
    # upper bound
    a‚Å∫ = nextfloat(a)
    h‚Å∫ = h + 0.5*(fma(-c, h, a) + fma(-c, h, a‚Å∫))/c
    l‚Å∫ = prevfloat(0.5*(fma(-c, h‚Å∫, a) + fma(-c, h‚Å∫, a‚Å∫))/c)
    @assert (h‚Å∫, l‚Å∫) == canonicalize2(h‚Å∫, l‚Å∫)
    @assert fma(c, h‚Å∫, c*l‚Å∫) < a‚Å∫
    while fma(c, h‚Å∫, c*l‚Å∫) < a‚Å∫
        l‚Å∫ = nextfloat(l‚Å∫)
    end
    l‚Å∫ = prevfloat(l‚Å∫)
    @assert fma(c, h‚Å∫, c*l‚Å∫) == a
    @assert fma(c, h‚Å∫, c*nextfloat(l‚Å∫)) == a‚Å∫
    @assert (h‚Å∫, l‚Å∫) == canonicalize2(h‚Å∫, l‚Å∫)
    g‚Å∫ = TwicePrecision(h‚Å∫, l‚Å∫)
    # return interval
    g‚Åª, g‚Å∫
end

struct FRange{T<:AbstractFloat} <: AbstractRange{T}
    c::T
    d::T
    n::T
    g::TwicePrecision{T}
end

Base.length(r::FRange) = Int(r.n) + 1
Base.step(r::FRange{T}) where {T<:AbstractFloat} = T(r.d*r.g)
Base.getindex(r::FRange{T}, i::Int) where {T<:AbstractFloat} =
    T((TwicePrecision{T}(i-1)*r.d + r.c)*r.g)

# example: (a, s, b) = (0.2, 0.1, 1.1)
# example: (a, s, b) = (-3e50, 1e50, 4e50)
# example: (a, s, b) = (-1e20, 3.0, 2e20)
# problem: can be made to hit zero but shouldn't!
# worse: (a, s, b) = (-1.0e17, 0.3, 2.0e18)
# another: (a, s, b) = (-1e14, .9, 8e15)

function range_ratios(a::T, s::T, b::T) where {T<:AbstractFloat}
    a‚Åª, a‚Å∫ = prevfloat(a), nextfloat(a)
    b‚Åª, b‚Å∫ = prevfloat(b), nextfloat(b)
    s‚Åª, s‚Å∫ = prevfloat(s), nextfloat(s)
    if signbit(s)
        s‚Åª, s‚Å∫ = s‚Å∫, s‚Åª
    end
    n‚Åª = cld(b‚Åª - a‚Å∫, s‚Å∫)
    n‚Å∫ = fld(b‚Å∫ - a‚Åª, s‚Åª)
    @assert n‚Åª ‚â§ n‚Å∫ # otherwise can't hit endpoint
    n = simplest_float(n‚Åª, n‚Å∫)
    p = tz(n)
    # make everything non-negative
    if signbit(a)
        a‚Åª, a‚Å∫ = -a‚Å∫, -a‚Åª
    end
    if signbit(s)
        s‚Åª, s‚Å∫ = -s‚Åª, -s‚Å∫
    end
    if signbit(b)
        b‚Åª, b‚Å∫ = -b‚Å∫, -b‚Åª
    end
    # find best grid divisor
    c = d = e = zero(T)
    while true
        d += one(T)
        # find simplest c
        c‚Åª = cld(d*a‚Åª, s‚Å∫)
        c‚Å∫ = fld(d*a‚Å∫, s‚Åª)
        c‚Åª ‚â§ c‚Å∫ || continue
        c = simplest_float(c‚Åª, c‚Å∫)
        tz(c) ‚â• p || continue
        # find simplest e
        e‚Åª = cld(d*b‚Åª, s‚Å∫)
        e‚Å∫ = fld(d*b‚Å∫, s‚Åª)
        e‚Åª ‚â§ e‚Å∫ || continue
        e = simplest_float(e‚Åª, e‚Å∫)
        tz(e) ‚â• p || continue
        # found good c & e
        break
    end
    # eliminated common powers of two
    z = min(tz(c), tz(d), tz(e))
    c = ldexp(c, -z)
    d = ldexp(d, -z)
    e = ldexp(e, -z)
    # restore signs for endpoints
    signbit(a) && (c = -c)
    signbit(b) && (e = -e)
    # return values
    n, c, d, e
end

function lift_range(a::T, s::T, b::T) where {T<:AbstractFloat}
    # find the relative grid ratios
    n, c, d, e = range_ratios(a, s, b)
    # integers such that:
    #  - c = d*a/s
    #  - e = d*b/s
    # still need rational value g:
    #  - g = s/d = a/c = b/e
    # get double precision bounds on g:
    g_a‚Åª, g_a‚Å∫ = g_ival(a, c)
    g_b‚Åª, g_b‚Å∫ = g_ival(b, e)
    g‚Åª = max(g_a‚Åª, g_b‚Åª)
    g‚Å∫ = min(g_a‚Å∫, g_b‚Å∫)
    g = 0.5*(g‚Åª + g‚Å∫)
    # check: end-points hit exactly, step approximately
    @assert T(c*g) == a
    @assert T(d*g) ‚âà  s
    @assert T(e*g) == b
    # return range object
    FRange(c, d, n, g)
end
